[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateStructuralFeatureSetGet('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::generateReference /]

[**
 * eGet Function
*/]
[template public generateeGetDel(aClass : EClass,impl : Boolean)]
virtual std::any eGet(int featureID, bool resolve, bool coreType) const [abstractSufix(impl)/];
[/template]

[template public generateeIsSetDel(aClass : EClass,impl : Boolean)]
virtual bool internalEIsSet(int featureID) const [abstractSufix(impl)/];
[/template]

[template public generateeSetDel(aClass : EClass,impl : Boolean)]
virtual bool eSet(int featureID, std::any newValue) [abstractSufix(impl)/];
[/template]

[template public generateeGetImpl(aClass : EClass)]
std::any [aClass.name.toUpperFirst().concat('Impl')/]::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
	[for (struct : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
			return [struct.GetterName()/](); //[aClass.getClassifierID()/][struct.getFeatureID()/]
	[/for]
	}
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::internalEIsSet(featureID);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::internalEIsSet(featureID);
[else]
	std::any result;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::internalEIsSet(featureID);
	[if (sClass <> eClasses->last())]
	if (!result.empty())
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateeIsSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
	[for (struct : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
			return [struct.generateComparison()/]; //[aClass.getClassifierID()/][struct.getFeatureID()/]
	[/for]
	}
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::internalEIsSet(featureID);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::internalEIsSet(featureID);
[else]
	bool result = false;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::internalEIsSet(featureID);
	[if (sClass <> eClasses->last())]
	if (result)
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateeSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::eSet(int featureID, std::any newValue)
{
	switch(featureID)
	{
[for (struct : EStructuralFeature | aClass.eStructuralFeatures->select(upperBound = 1 and changeable)->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
		{
[if (not struct.eType.oclIsKindOf(EDataType))]
			std::shared_ptr<[struct.eGenericType.generateCppType()/]> _[struct.name/] = std::any_cast<std::shared_ptr<[struct.eGenericType.generateCppType()/]>>(newValue);
[else]
			[struct.eGenericType.generateCppType()/] _[struct.name/] = std::any_cast<[struct.eGenericType.generateCppType()/]>(newValue);
[/if]
			[struct.SetterName()/](_[struct.name/]); //[aClass.getClassifierID()/][struct.getFeatureID()/]
			return true;
		}
[/for]
	}

[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::eSet(featureID, newValue);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::eSet(featureID, newValue);
[else]
	bool result = false;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::eSet(featureID, newValue);
	[if (sClass <> eClasses->last())]
	if (result)
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (oclIsKindOf(EAttribute) and not eType.requiresAny()) post (trim())]
[if (anStructFeature.upperBound <> 1)]
![anStructFeature.GetterName()/]()->empty()
[elseif (eType.oclIsKindOf(EEnum))]
m_[anStructFeature.name/] ![anStructFeature.oclAsType(EAttribute).generateDefaultValue()/];
[else]
[anStructFeature.GetterName()/]() != [anStructFeature.oclAsType(EAttribute).getDefaultValue()/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (not oclIsKindOf(EAttribute) and not eType.requiresAny())]
[anStructFeature.GetterName()/]()[if (anStructFeature.oclIsKindOf(EReference))][if(anStructFeature.oclAsType(EReference).isBackReference())].lock()[/if][/if] != [anStructFeature.eType.getDefaultValue()/]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (eType.requiresAny())]
[anStructFeature.GetterName()/]().has_value()
[/template]